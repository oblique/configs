diff --color -u i3lock-2.15.orig/i3lock.c i3lock-2.15/i3lock.c
--- i3lock-2.15.orig/i3lock.c	2024-03-16 11:37:48.000000000 +0200
+++ i3lock-2.15/i3lock.c	2024-09-25 23:11:08.725878624 +0300
@@ -57,7 +57,7 @@
 typedef void (*ev_callback_t)(EV_P_ ev_timer *w, int revents);
 static void input_done(void);

-char color[7] = "a3a3a3";
+char color[7] = "101010";
 uint32_t last_resolution[2];
 xcb_window_t win;
 static xcb_cursor_t cursor;
diff --color -u i3lock-2.15.orig/unlock_indicator.c i3lock-2.15/unlock_indicator.c
--- i3lock-2.15.orig/unlock_indicator.c	2024-03-16 11:37:48.000000000 +0200
+++ i3lock-2.15/unlock_indicator.c	2024-09-25 23:22:58.858447893 +0300
@@ -111,11 +111,6 @@
     y = BUTTON_CENTER - ((extents.height / 2) + extents.y_bearing) + y_offset;

     cairo_move_to(ctx, x, y);
-    if (use_dark_text) {
-        cairo_set_source_rgb(ctx, 0., 0., 0.);
-    } else {
-        cairo_set_source_rgb(ctx, 1., 1., 1.);
-    }
     cairo_show_text(ctx, text);
     cairo_close_path(ctx);
 }
@@ -230,25 +225,7 @@
                   0 /* start */,
                   2 * M_PI /* end */);

-        /* Use the appropriate color for the different PAM states
-         * (currently verifying, wrong password, or default) */
-        switch (auth_state) {
-            case STATE_AUTH_VERIFY:
-            case STATE_AUTH_LOCK:
-                cairo_set_source_rgba(ctx, 0, 114.0 / 255, 255.0 / 255, 0.75);
-                break;
-            case STATE_AUTH_WRONG:
-            case STATE_I3LOCK_LOCK_FAILED:
-                cairo_set_source_rgba(ctx, 250.0 / 255, 0, 0, 0.75);
-                break;
-            default:
-                if (unlock_state == STATE_NOTHING_TO_DELETE) {
-                    cairo_set_source_rgba(ctx, 250.0 / 255, 0, 0, 0.75);
-                    break;
-                }
-                cairo_set_source_rgba(ctx, 0, 0, 0, 0.75);
-                break;
-        }
+        cairo_set_source_rgb(ctx, 0x10/255.0, 0x10/255.0, 0x10/255.0);
         cairo_fill_preserve(ctx);

         bool use_dark_text = true;
@@ -256,26 +233,26 @@
         switch (auth_state) {
             case STATE_AUTH_VERIFY:
             case STATE_AUTH_LOCK:
-                cairo_set_source_rgb(ctx, 51.0 / 255, 0, 250.0 / 255);
+                cairo_set_source_rgb(ctx, 0x5f/255.0, 0x87/255.0, 0xd7/255.0);
                 break;
             case STATE_AUTH_WRONG:
             case STATE_I3LOCK_LOCK_FAILED:
-                cairo_set_source_rgb(ctx, 125.0 / 255, 51.0 / 255, 0);
+                cairo_set_source_rgb(ctx, 0xcb/255.0, 0x00/255.0, 0x52/255.0);
                 break;
             case STATE_AUTH_IDLE:
                 if (unlock_state == STATE_NOTHING_TO_DELETE) {
-                    cairo_set_source_rgb(ctx, 125.0 / 255, 51.0 / 255, 0);
+                    cairo_set_source_rgb(ctx, 0xcb/255.0, 0x00/255.0, 0x52/255.0);
                     break;
                 }

-                cairo_set_source_rgb(ctx, 51.0 / 255, 125.0 / 255, 0);
+                cairo_set_source_rgb(ctx, 0x66/255.0, 0xff/255.0, 0x66/255.0);
                 use_dark_text = false;
                 break;
         }
         cairo_stroke(ctx);

         /* Draw an inner seperator line. */
-        cairo_set_source_rgb(ctx, 0, 0, 0);
+        cairo_set_source_rgb(ctx, 0x10/255.0, 0x10/255.0, 0x10/255.0);
         cairo_set_line_width(ctx, 2.0);
         cairo_arc(ctx,
                   BUTTON_CENTER /* x */,
@@ -292,18 +269,21 @@
         /* We don't want to show more than a 3-digit number. */
         char buf[4];

-        cairo_set_source_rgb(ctx, 0, 0, 0);
+        cairo_set_source_rgb(ctx, 0x10/255.0, 0x10/255.0, 0x10/255.0);
         cairo_select_font_face(ctx, "sans-serif", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
         cairo_set_font_size(ctx, 28.0);
         switch (auth_state) {
             case STATE_AUTH_VERIFY:
                 text = "Verifying…";
+                cairo_set_source_rgb(ctx, 0x5f/255.0, 0x87/255.0, 0xd7/255.0);
                 break;
             case STATE_AUTH_LOCK:
                 text = "Locking…";
+                cairo_set_source_rgb(ctx, 0xcb/255.0, 0x00/255.0, 0x52/255.0);
                 break;
             case STATE_AUTH_WRONG:
                 text = "Wrong!";
+                cairo_set_source_rgb(ctx, 0xcb/255.0, 0x00/255.0, 0x52/255.0);
                 break;
             case STATE_I3LOCK_LOCK_FAILED:
                 text = "Lock failed!";
@@ -319,7 +299,7 @@
                         snprintf(buf, sizeof(buf), "%d", failed_attempts);
                         text = buf;
                     }
-                    cairo_set_source_rgb(ctx, 1, 0, 0);
+                    cairo_set_source_rgb(ctx, 0xcb/255.0, 0x00/255.0, 0x52/255.0);
                     cairo_set_font_size(ctx, 32.0);
                 }
                 break;
@@ -353,16 +333,16 @@
                       highlight_start + (M_PI / 3.0));
             if (unlock_state == STATE_KEY_ACTIVE) {
                 /* For normal keys, we use a lighter green. */
-                cairo_set_source_rgb(ctx, 51.0 / 255, 219.0 / 255, 0);
+                cairo_set_source_rgb(ctx, 0x5f/255.0, 0x87/255.0, 0xd7/255.0);
             } else {
                 /* For backspace, we use red. */
-                cairo_set_source_rgb(ctx, 219.0 / 255, 51.0 / 255, 0);
+                cairo_set_source_rgb(ctx, 0xcb/255.0, 0x00/255.0, 0x52/255.0);
             }
             cairo_stroke(ctx);

             /* Draw two little separators for the highlighted part of the
              * unlock indicator. */
-            cairo_set_source_rgb(ctx, 0, 0, 0);
+            cairo_set_source_rgb(ctx, 0x10/255.0, 0x10/255.0, 0x10/255.0);
             cairo_arc(ctx,
                       BUTTON_CENTER /* x */,
                       BUTTON_CENTER /* y */,
